#include ../headers/combinaison.h
#include ../headers/point.h
#include ../headers/cluster.h


point_t* sol_init_centroids;
point_t sol_centro;
cluster_t sol_clusters;
uint64_t sol_distortion;

point_t *list_init_centroids;
point_t *list_centro;
cluster_t *list_clusters;
uint64_t *list_distortion;

point_t *centro_initial_list;

uint64_t combi = combinaison(p,program_arguments.k);
point_t **vect;
for (uint64_t i = 0; i < combi;i++) {
    vect[i] = vectors[i];
}

for (uint64_t i = 0; i < combi; ++i) {

    centro_initial_list[i] = vect[i];

    cluster_t combi_cluster = kmeans(centro_initial_list, program_arguments.k, num_points, dim, DISTANCE_SQUARED);//, cluster_t combi_clu k_means(point_t *initial_centroids, uint32_t K, point_t **vectors, uint64_t num_vectors, uint32_t dimensions)
    point_t *combi_centro;
    for (int i=0;i< combi_cluster.size){
        combi_centro[i] = combi_cluster.center;
    }
    uint64_t combi_distortion = distortion(combi_cluster, program_arguments.k , DISTANCE_SQUARED);//(cluster_t const **clusters, uint32_t num_clusters, squared_distance_func_t DISTANCE_SQUARED)
    //uint64_t distortion(cluster_t const **clusters, uint32_t num_clusters, DISTANCE_SQUARED) {
    if (sol_distortion > combi_distortion){
        sol_distortion = combi_distortion;
        sol_centro = combi_centro;
        sol_clusters = combi_cluster;
        sol_init_centroids = centro_initial_list;
    }
    list_init_centroids[i] = list_init_centroids;
    list_distortion[i] = combi_distortion;
    list_centro[i] = combi_centro;
    list_clusters[i] = combi_clusters;

}
